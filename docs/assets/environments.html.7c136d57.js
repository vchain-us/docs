import{r as d,o as n,c,a as t,d as r,F as a,b as e,e as s}from"./app.0a892dac.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const _={},h=t("h1",{id:"environments",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#environments","aria-hidden":"true"},"#"),e(" Environments")],-1),l=e("By default "),N=t("code",null,"vcn",-1),T=e(" will put the config file and secrets within the a directory called "),v=t("code",null,".vcn",-1),u=e(" within your "),p={href:"https://en.wikipedia.org/wiki/Home_directory",target:"_blank",rel:"noopener noreferrer"},S=e("home directory"),g=e(" (e.g. "),m=t("code",null,"$HOME/.vcn",-1),A=e(" or "),E=t("code",null,"%USERPROFILE%\\.vcn",-1),O=e(" on Windows)."),R=s('<p>However, <code>vcn</code> can work with distinct environments (eg. for testing purpose).</p><p>The following environments are supported by setting the <code>STAGE</code> environment var:</p><table><thead><tr><th>Stage</th><th>Directory</th><th>Note</th></tr></thead><tbody><tr><td><code>STAGE=PRODUCTION</code></td><td><code>.vcn</code></td><td><em>default</em></td></tr><tr><td><code>STAGE=STAGING</code></td><td><code>.vcn.staging</code></td><td></td></tr><tr><td><code>STAGE=TEST</code></td><td><code>.vcn.test</code></td><td><em><code>VCN_TEST_DASHBOARD</code>, <code>VCN_TEST_NET</code>, <code>VCN_TEST_CONTRACT</code>, <code>VCN_TEST_API</code> must be set accordingly to your test environment</em></td></tr></tbody></table><h2 id="other-environment-variables" tabindex="-1"><a class="header-anchor" href="#other-environment-variables" aria-hidden="true">#</a> Other environment variables</h2><table><thead><tr><th>Name</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>VCN_USER</code>, <code>VCN_PASSWORD</code></td><td>Credentials for non-interactive user login</td><td><code>VCN_USER=example@example.net VCN_PASSWORD=&lt;your_password&gt; vcn login</code></td></tr><tr><td><code>VCN_SIGNERID</code></td><td>For <code>vcn authenticate</code> acts as a list of SignerID(s) (separated by space) to authenticate against</td><td><code>VCN_SIGNERID=&quot;0x0...0 0x0...1&quot; vcn authenticate &lt;asset&gt;</code> or <code>VCN_SIGNERID=&quot;0x0...0 &lt;asset&gt;</code></td></tr><tr><td><code>VCN_ORG</code></td><td>Organization&#39;s ID to authenticate against</td><td><code>VCN_ORG=&quot;vchain.us&quot; vcn authenticate &lt;asset&gt;</code></td></tr><tr><td><code>VCN_NOTARIZATION_PASSWORD</code></td><td>Notarization password for non-interactive notarization</td><td><code>VCN_NOTARIZATION_PASSWORD=&lt;your_notarization_passphrase&gt; vcn notarize &lt;asset&gt;</code></td></tr><tr><td><code>VCN_NOTARIZATION_PASSWORD_EMPTY</code></td><td>Instruct <code>vcn</code> to use an empty notarization password (<code>VCN_NOTARIZATION_PASSWORD</code> will be ignored)</td><td><code>VCN_NOTARIZATION_PASSWORD_EMPTY=yes vcn notarize &lt;asset&gt;</code></td></tr><tr><td><code>LOG_LEVEL</code></td><td>Logging verbosity. Accepted values: <code>TRACE, DEBUG, INFO, WARN, ERROR, FATAL, PANIC</code></td><td><code>LOG_LEVEL=TRACE vcn login</code></td></tr><tr><td><code>HTTP_PROXY</code></td><td>HTTP Proxy configuration</td><td><code>HTTP_PROXY=http://localhost:3128 vcn authenticate &lt;asset&gt;</code></td></tr></tbody></table>',5);function I(C,V){const o=d("ExternalLinkIcon");return n(),c(a,null,[h,t("p",null,[l,N,T,v,u,t("a",p,[S,r(o)]),g,m,A,E,O]),R],64)}var y=i(_,[["render",I]]);export{y as default};

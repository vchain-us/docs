import{r as n,o as s,c as i,a as e,d as r,w as o,F as d,e as l,b as a}from"./app.e0d15f64.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const p={},u=l(`<h2 id="vcn-unsupport" tabindex="-1"><a class="header-anchor" href="#vcn-unsupport" aria-hidden="true">#</a> vcn unsupport</h2><p>Unsupport an asset</p><h3 id="synopsis" tabindex="-1"><a class="header-anchor" href="#synopsis" aria-hidden="true">#</a> Synopsis</h3><p>Change an asset&#39;s status so it is equal to UNSUPPORTED.</p><p>Unsupport command calculates the SHA-256 hash of a digital asset (file, directory, container&#39;s image). The hash (not the asset) and the desired status of UNSUPPORTED are then cryptographically signed by the signer&#39;s secret (private key). Next, these signed objects are sent to the blockchain where the signer\u2019s trust level and a timestamp are added. When complete, a new blockchain entry is created that binds the asset\u2019s signed hash, signed status, level, and timestamp together.</p><p>Note that your assets will not be uploaded. They will be processed locally.</p><p>Assets are referenced by passed ARG(s) with unsupport command only accepting 1 ARG at a time.</p><p>ARG must be one of</p><ul><li><code>file://&lt;file&gt;</code></li><li><code>dir://&lt;directory&gt;</code></li><li><code>git://&lt;repository&gt;</code></li><li><code>docker://&lt;image&gt;</code></li><li><code>podman://&lt;image&gt;</code></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>vcn unsupport [flags]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>  -a, --attr key=value   add user defined attributes (repeat --attr for multiple entries)
      --hash string      specify the hash instead of using an asset, if set no ARG(s) can be used
  -h, --help             help for unsupport
  -n, --name string      set the asset name
      --no-ignore-file   if set, .vcnignore will be not written inside the targeted dir
  -p, --public           when notarized as public, the asset name and metadata will be visible to everyone
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="options-inherited-from-parent-commands" tabindex="-1"><a class="header-anchor" href="#options-inherited-from-parent-commands" aria-hidden="true">#</a> Options inherited from parent commands</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>      --config string   config file (default is $HOME/.vcn/config.json)
  -o, --output string   output format, one of: --output=json|--output=yaml|--output=&#39;&#39;
  -S, --silent          silent mode, don&#39;t show progress spinner, but it will still output the result
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> SEE ALSO</h3>`,15),h=a("vcn"),m=a(" - vChain Codenotary - Notarize and authenticate, from code to production"),b=e("h6",{id:"auto-generated-by-spf13-cobra-on-24-jan-2020",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#auto-generated-by-spf13-cobra-on-24-jan-2020","aria-hidden":"true"},"#"),a(" Auto generated by spf13/cobra on 24-Jan-2020")],-1);function g(f,v){const t=n("RouterLink");return s(),i(d,null,[u,e("ul",null,[e("li",null,[r(t,{to:"/vcn/cmd/vcn.html"},{default:o(()=>[h]),_:1}),m])]),b],64)}var _=c(p,[["render",g]]);export{_ as default};

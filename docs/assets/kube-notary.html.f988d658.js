import{r as o,o as i,c,a as n,d as t,w as l,F as d,e as s,b as e}from"./app.e0d15f64.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const h={},p=s('<h1 id="kube-notary" tabindex="-1"><a class="header-anchor" href="#kube-notary" aria-hidden="true">#</a> kube-notary</h1><blockquote><p>A Kubernetes watchdog for verifying image trust with Codenotary.</p></blockquote><p><img src="https://raw.githubusercontent.com/vchain-us/kube-notary/master/docs/images/info.png" alt="alt text" title="Codenotary for Kubernetes"></p><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a> How it works</h2>',4),b=n("strong",null,"kube-notary",-1),m=e(" is a monitoring tool for "),g=n("em",null,"Continuous Verification",-1),_=e(" (CV) via "),f={href:"https://codenotary.io",target:"_blank",rel:"noopener noreferrer"},y=e("Codenotary"),v=e(". The idea behind CV is to continuously monitor your cluster at runtime and be notified when unknown or untrusted container images are running."),k=e("Once "),x=n("code",null,"kube-notary",-1),w=e(" is installed within your cluster, all pods are checked every minute (interval and other settings can be "),q=n("a",{href:"#Configuration"},"configured",-1),C=e("). For each of the running containers in each pod, "),E=n("code",null,"kube-notary",-1),I=e(" resolves the "),A=n("code",null,"ImageID",-1),N=e(" of the container's image to the actual image's hash and finally looks up the "),R={href:"https://github.com/vchain-us/vcn/blob/master/docs/user-guide/signatures.md#signatures",target:"_blank",rel:"noopener noreferrer"},S=e("hash's signature in the Codenotary's blockchain"),M=e("."),V=n("p",null,[e("Furthermore, kube-notary provides a built-in exporter for sending verification "),n("a",{href:"#Metrics"},"metrics"),e(" to Prometheus, which can then that can be easily visualized with the provided "),n("a",{href:"grafana"},"grafana dashboard"),e(".")],-1),P=e("Images you trust can be signed by using the Codenotary "),$={href:"https://github.com/vchain-us/vcn",target:"_blank",rel:"noopener noreferrer"},D=e("vcn"),F=e(" CLI tool."),H=s(`<p>https://infograph.venngage.com/ps/ex4ECrROPCQ/codenotary-for-kubernetes</p><h2 id="install" tabindex="-1"><a class="header-anchor" href="#install" aria-hidden="true">#</a> Install</h2><p><code>kube-notary</code> is installed using a Helm chart.</p><blockquote><p>Kubernetes 1.9 or above, and Helm 2.8 or above need to be installed in your cluster.</p></blockquote><p>First, make sure your local config is pointing to the context you want to use (ie. check <code>kubectl config current-context</code>). Then, to install <code>kube-notary</code>:</p><ul><li>Clone this repository locally: https://github.com/vchain-us/kube-notary</li><li>Change directory into <code>kube-notary</code>.</li><li>Finally run:</li></ul><p>Helm v2</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>helm install -n kube-notary helm/kube-notary
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Helm v3</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>helm install kube-notary helm/kube-notary -n kube-notary
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>See the <a href="#Configuration">Configuration</a> paragraph for detailed instructions.</p></blockquote><h3 id="namespaced" tabindex="-1"><a class="header-anchor" href="#namespaced" aria-hidden="true">#</a> Namespaced</h3><p>If you do not have cluster-wide access, you can still install <code>kube-notary</code> within a single namespace, using:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>helm install -n kube-notary helm/kube-notary --set watch.namespace=&quot;default&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,14),L=e("When so configured, a namespaced "),O=n("code",null,"Role",-1),T=e(" will be created instead of the default "),j=n("code",null,"ClusterRole",-1),z=e(" to accommodate Kubernetes "),B={href:"https://kubernetes.io/docs/reference/access-authn-authz/rbac/",target:"_blank",rel:"noopener noreferrer"},K=e("RBAC"),W=e(" for a single namespace. "),G=n("code",null,"kube-notary",-1),U=e(" will get permission for, and will watch, the configured namespace only."),Y=s(`<h3 id="manual-installation-without-helm" tabindex="-1"><a class="header-anchor" href="#manual-installation-without-helm" aria-hidden="true">#</a> Manual installation (without Helm)</h3><p>Alternatively, it is possible to manually install <code>kube-notary</code> without using Helm. Instructions and templates for manual installation are within the <a href="kubernetes">kubernetes folder</a>.</p><h2 id="uninstall" tabindex="-1"><a class="header-anchor" href="#uninstall" aria-hidden="true">#</a> Uninstall</h2><p>You can uninstall <code>kube-notary</code> at any time using:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>helm delete --purge kube-notary
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p><code>kube-notary</code> provides both detailed log output and a Prometheus metrics endpoint to monitor the verification status of your running containers. After the installation you will find instructions on how to get them.</p><p>Examples:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>  # Metrics endpoint
  export SERVICE_NAME=service/$(kubectl get service --namespace default -l &quot;app.kubernetes.io/name=kube-notary,app.kubernetes.io/instance=kube-notary&quot; -o jsonpath=&quot;{.items[0].metadata.name}&quot;)
  echo &quot;Check the metrics endpoint at http://127.0.0.1:9581/metrics&quot;
  kubectl port-forward --namespace default $SERVICE_NAME 9581

  # Results endpoint
  export SERVICE_NAME=service/$(kubectl get service --namespace default -l &quot;app.kubernetes.io/name=kube-notary,app.kubernetes.io/instance=kube-notary&quot; -o jsonpath=&quot;{.items[0].metadata.name}&quot;)
  echo &quot;Check the verification results endpoint at http://127.0.0.1:9581/results&quot;
  kubectl port-forward --namespace default $SERVICE_NAME 9581

  # Stream logs
  export POD_NAME=$(kubectl get pods --namespace default -l &quot;app.kubernetes.io/name=kube-notary,app.kubernetes.io/instance=kube-notary&quot; -o jsonpath=&quot;{.items[0].metadata.name}&quot;)
  kubectl logs --namespace default -f $POD_NAME

  # Bulk sign all running images
  export POD_NAME=$(kubectl get pods --namespace default -l &quot;app.kubernetes.io/name=kube-notary,app.kubernetes.io/instance=kube-notary&quot; -o jsonpath=&quot;{.items[0].metadata.name}&quot;)
  kubectl exec --namespace default -t $POD_NAME sh /bin/bulk_sign &gt; vcn_bulk_sign.sh
  chmod +x vcn_bulk_sign.sh &amp;&amp; ./vcn_bulk_sign.sh
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="status-page" tabindex="-1"><a class="header-anchor" href="#status-page" aria-hidden="true">#</a> Status page</h3><p><code>kube-notary</code> provides an embedded status page with details of running containers and verifications. Once <code>kube-notary</code> is up and running the page is available at <code>http://$SERVICE_ADDRESS:9581/status/</code> (the service address depends on your installation). If you installed it by using the provided helm chart, the easiest way to get the status page URL is:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>  # Status page
  export SERVICE_NAME=service/$(kubectl get service --namespace default -l &quot;app.kubernetes.io/name=kube-notary,app.kubernetes.io/instance=kube-notary&quot; -o jsonpath=&quot;{.items[0].metadata.name}&quot;)
  echo &quot;Status page at http://127.0.0.1:9581/status/&quot;
  kubectl port-forward --namespace default $SERVICE_NAME 9581
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="metrics" tabindex="-1"><a class="header-anchor" href="#metrics" aria-hidden="true">#</a> Metrics</h3>`,13),Q=e("If a Prometheus installation is running within your cluster, metrics provided by "),J=n("code",null,"kube-notary",-1),X=e(" will be automatically discovered. Furthermore, you can find an example of a preconfigured Grafana dashboard "),Z=e("here"),ee=e("."),ne=s(`<h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>By default, <code>kube-notary</code> is installed into the current namespace (you can change it by using <code>helm install --namespace</code>) but it will watch to pods in all namespaces.</p><p>At install time you can change any values of <a href="helm/kube-notary/values.yaml">helm/kube-notary/values.yaml</a> by using the Helm&#39;s <code>--set</code> option. For example, to instruct <code>kube-notary</code> to check only the <code>kube-system</code> namespace, just use:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>helm install -n kube-notary helm/kube-notary --set watch.namespace=&quot;kube-system&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="trusted-signers" tabindex="-1"><a class="header-anchor" href="#trusted-signers" aria-hidden="true">#</a> Trusted signers</h3><p>Choosing signers who can be trusted is easy. At install time, you can <code>--set</code> one of the following options.</p><h4 id="configure-a-list-of-trusted-keys" tabindex="-1"><a class="header-anchor" href="#configure-a-list-of-trusted-keys" aria-hidden="true">#</a> Configure a list of trusted keys</h4><p>Lists can be expressed by enclosing keys in <code>{</code> and <code>}</code> separated by <code>,</code>. For example:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>helm install -n kube-notary helm/kube-notary --set &quot;trust.keys={0x123..., 0x123...}&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="configure-a-trusted-organization" tabindex="-1"><a class="header-anchor" href="#configure-a-trusted-organization" aria-hidden="true">#</a> Configure a trusted organization</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>helm install -n kube-notary helm/kube-notary --set &quot;trust.org=your.organization.com&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="note" tabindex="-1"><a class="header-anchor" href="#note" aria-hidden="true">#</a> Note</h4><p>If both <code>trust.org</code> and <code>trust.keys</code> are set, only <code>trust.org</code> will be used.</p>`,13),te=e("If none is set, the last "),ae={href:"https://github.com/vchain-us/vcn/blob/master/docs/user-guide/signatures.md#signatures",target:"_blank",rel:"noopener noreferrer"},se=e("signature"),oe=e(" by the signer with the highest available "),re={href:"https://github.com/vchain-us/vcn/blob/master/docs/user-guide/signatures.md#level",target:"_blank",rel:"noopener noreferrer"},ie=e("level"),ce=e(" will be used during the verification."),le=s(`<h3 id="runtime-configuration" tabindex="-1"><a class="header-anchor" href="#runtime-configuration" aria-hidden="true">#</a> Runtime configuration</h3><p>The following options within <a href="helm/kube-notary/values.yaml">helm/kube-notary/values.yaml</a> have effect on the <code>kube-notary</code> runtime behavior.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># Runtime config
log:
  level: info # verbosity level, one of: trace, debug, info, warn, error, fatal, panic
watch: 
  namespace: &quot;&quot; # the namespace name to watch 
  interval: 60s # duration of the watching interval
trust:
  org: &quot;&quot; # ID of the trusted organization, if not empty \`keys\` above will be ignored
  keys: # array of signing keys to verify against
   - ...
   - ...
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>During the installation, they are stored in a <code>configmap</code>. Configuration hot-reloading is supported, so you can modify and apply the configmap while <code>kube-notary</code> is running.</p><p>For example, to change the watching interval from default to <code>30s</code>:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>kubectl patch configmaps/kube-notary \\
    --type merge \\
    -p &#39;{&quot;data&quot;:{&quot;config.yaml&quot;:&quot;log:\\n  level: debug\\nwatch: \\n  namespace: \\n  interval: 30s&quot;}}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="faq" tabindex="-1"><a class="header-anchor" href="#faq" aria-hidden="true">#</a> FAQ</h2><h3 id="why-continuous-verification" tabindex="-1"><a class="header-anchor" href="#why-continuous-verification" aria-hidden="true">#</a> Why <em>Continuous Verification</em> ?</h3>`,8),de=e("Things change over time. Suppose you signed an image because you trust it. Later, you find a security issue within the image or you just want to deprecate that version. When that happens you can simply use "),ue={href:"https://github.com/vchain-us/vcn#basic-usage",target:"_blank",rel:"noopener noreferrer"},he=e("vcn"),pe=e(" to "),be={href:"https://github.com/vchain-us/vcn/blob/master/docs/user-guide/signatures.md#statuses",target:"_blank",rel:"noopener noreferrer"},me=e("untrust or unsupport"),ge=e(" that image version. Once the image is not trusted anymore, thanks to "),_e=n("code",null,"kube-notary",-1),fe=e(" you can easily discover if the image is still running somewhere in your cluster."),ye=n("p",null,[e("In general, verifying an image just before its execution is not enough because the image's status or the image that's used by a container can change over time. "),n("em",null,"Continuous Verification"),e(" ensures that you will always get noticed if an unwanted behavior occurs.")],-1),ve=n("h3",{id:"how-can-i-sign-my-image",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#how-can-i-sign-my-image","aria-hidden":"true"},"#"),e(" How can I sign my image?")],-1),ke=e("You can easily sign your container's images by using the "),xe={href:"https://github.com/vchain-us/vcn",target:"_blank",rel:"noopener noreferrer"},we=e("vcn CLI"),qe=e(" we provide separately."),Ce=n("code",null,"vcn",-1),Ee=e(" supports local Docker installations out of the box using "),Ie=n("code",null,"docker://",-1),Ae=e(" prefix, followed by the image name or image reference. You just have to pull the image you want to sign, then finally run "),Ne=n("code",null,"vcn sign",-1),Re=e(". Detailed instructions can be found "),Se={href:"https://github.com/vchain-us/vcn/blob/master/docs/user-guide/schemes/docker.md",target:"_blank",rel:"noopener noreferrer"},Me=e("here"),Ve=e("."),Pe=s(`<p>Furthermore, if you want to bulk sign all images running inside your cluster, you will find below instructions to generate a script that automates the process.</p><p>Export <code>POD_NAME</code> setting it to the <code>kube-notary</code>&#39;s pod name, then run:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>kubectl exec --namespace default -t $POD_NAME sh /bin/bulk_sign &gt; vcn_bulk_sign.sh
chmod +x vcn_bulk_sign.sh &amp;&amp; ./vcn_bulk_sign.sh
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,3),$e=e("Note that a "),De={href:"https://codenotary.io",target:"_blank",rel:"noopener noreferrer"},Fe=e("Codenotary"),He=e(" account and a local installation of "),Le={href:"https://github.com/vchain-us/vcn",target:"_blank",rel:"noopener noreferrer"},Oe=e("vcn"),Te=e(" are needed. Also, make sure your "),je=n("code",null,"kubectl",-1),ze=e(" is pointing to the context you want to use."),Be=s('<h3 id="how-can-i-be-notified-when-untrusted-images-are-running" tabindex="-1"><a class="header-anchor" href="#how-can-i-be-notified-when-untrusted-images-are-running" aria-hidden="true">#</a> How can I be notified when untrusted images are running?</h3><p>First, Prometheus and Grafana need to be installed in your cluster.</p><p>Then it&#39;s easy to <a href="grafana#creating-alerts">create alerts</a> using the provided <a href="grafana">Grafana dashboard</a></p><h3 id="why-my-image-cannot-be-signed-manifest-v2-schema-1" tabindex="-1"><a class="header-anchor" href="#why-my-image-cannot-be-signed-manifest-v2-schema-1" aria-hidden="true">#</a> Why my image cannot be signed? (manifest v2 schema 1)</h3>',4),Ke=e("The image manifest v2 schema 1 format is "),We={href:"https://docs.docker.com/engine/deprecated/#pushing-and-pulling-with-image-manifest-v2-schema-1",target:"_blank",rel:"noopener noreferrer"},Ge=e("deprecated"),Ue=e(" in favor of the v2 schema 2 format."),Ye=n("p",null,"Please, move to v2 schema 2 as soon as possible. Usually, you can fix that simply by pushing your image again on the registry.",-1),Qe=n("h3",{id:"cannot-create-resource-clusterrolebindings",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cannot-create-resource-clusterrolebindings","aria-hidden":"true"},"#"),e(' Cannot create resource "clusterrolebindings"')],-1),Je=e("Recent versions of Kubernetes employ a "),Xe={href:"https://kubernetes.io/docs/reference/access-authn-authz/rbac/",target:"_blank",rel:"noopener noreferrer"},Ze=e("role-based access control"),en=e(" (or RBAC) system to drive authorization decisions. It might be possible that your account does not have enough privileges to create the "),nn=n("code",null,"ClusterRole",-1),tn=e(" needed to get cluster-wide access."),an=s('<p>Please use a high privileged account to install <code>kube-notary</code>. Alternatively, if you don&#39;t have cluster-wide access, you can still install <code>kube-notary</code> to work in a single namespace which you can access. See the <a href="#Namespaced">namespaced installation</a> paragraph for further details.</p><h3 id="helm-error-release-kube-watch-failed-namespaces-is-forbidden" tabindex="-1"><a class="header-anchor" href="#helm-error-release-kube-watch-failed-namespaces-is-forbidden" aria-hidden="true">#</a> Helm error: release kube-watch failed: namespaces &quot;...&quot; is forbidden</h3><p>It might be possible that <code>tiller</code> (the Helm&#39;s server-side component) does not have permission to install <code>kube-notary</code>.</p>',3),sn=e("When working within a "),on={href:"https://kubernetes.io/docs/reference/access-authn-authz/rbac/",target:"_blank",rel:"noopener noreferrer"},rn=e("role-based access control"),cn=e(" enabled Kubernetes installation, you may need to add a "),ln={href:"https://helm.sh/docs/using_helm/#tiller-and-role-based-access-control",target:"_blank",rel:"noopener noreferrer"},dn=e("service account with cluster-admin role"),un=e(" for "),hn=n("code",null,"tiller",-1),pn=e("."),bn=e("The easier way to do that is just to create a "),mn=n("code",null,"rbac-config.yaml",-1),gn=e(" copying and pasting the "),_n={href:"https://helm.sh/docs/using_helm/#example-service-account-with-cluster-admin-role",target:"_blank",rel:"noopener noreferrer"},fn=e("provided example in the Helm documentation"),yn=e(", then:"),vn=s(`<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ kubectl create -f rbac-config.yaml
serviceaccount &quot;tiller&quot; created
clusterrolebinding &quot;tiller&quot; created
$ helm init --service-account tiller --history-max 200
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="servicemonitor-for-prometheus-operator" tabindex="-1"><a class="header-anchor" href="#servicemonitor-for-prometheus-operator" aria-hidden="true">#</a> ServiceMonitor for Prometheus Operator</h3>`,2),kn=e("See "),xn={href:"https://github.com/vchain-us/kube-notary/issues/11",target:"_blank",rel:"noopener noreferrer"},wn=e("#11"),qn=e("."),Cn=s(`<h2 id="testing" tabindex="-1"><a class="header-anchor" href="#testing" aria-hidden="true">#</a> Testing</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>make test/e2e
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="license" tabindex="-1"><a class="header-anchor" href="#license" aria-hidden="true">#</a> License</h2>`,3),En=e("This software is released under "),In={href:"https://www.gnu.org/licenses/gpl-3.0.en.html",target:"_blank",rel:"noopener noreferrer"},An=e("GPL3"),Nn=e(".");function Rn(Sn,Mn){const a=o("ExternalLinkIcon"),r=o("RouterLink");return i(),c(d,null,[p,n("p",null,[b,m,g,_,n("a",f,[y,t(a)]),v]),n("p",null,[k,x,w,q,C,E,I,A,N,n("a",R,[S,t(a)]),M]),V,n("p",null,[P,n("a",$,[D,t(a)]),F]),H,n("p",null,[L,O,T,j,z,n("a",B,[K,t(a)]),W,G,U]),Y,n("p",null,[Q,J,X,t(r,{to:"/integrations/grafana/"},{default:l(()=>[Z]),_:1}),ee]),ne,n("p",null,[te,n("a",ae,[se,t(a)]),oe,n("a",re,[ie,t(a)]),ce]),le,n("p",null,[de,n("a",ue,[he,t(a)]),pe,n("a",be,[me,t(a)]),ge,_e,fe]),ye,ve,n("p",null,[ke,n("a",xe,[we,t(a)]),qe]),n("p",null,[Ce,Ee,Ie,Ae,Ne,Re,n("a",Se,[Me,t(a)]),Ve]),Pe,n("blockquote",null,[n("p",null,[$e,n("a",De,[Fe,t(a)]),He,n("a",Le,[Oe,t(a)]),Te,je,ze])]),Be,n("p",null,[Ke,n("a",We,[Ge,t(a)]),Ue]),Ye,Qe,n("p",null,[Je,n("a",Xe,[Ze,t(a)]),en,nn,tn]),an,n("p",null,[sn,n("a",on,[rn,t(a)]),cn,n("a",ln,[dn,t(a)]),un,hn,pn]),n("p",null,[bn,mn,gn,n("a",_n,[fn,t(a)]),yn]),vn,n("p",null,[kn,n("a",xn,[wn,t(a)]),qn]),Cn,n("p",null,[En,n("a",In,[An,t(a)]),Nn])],64)}var $n=u(h,[["render",Rn]]);export{$n as default};

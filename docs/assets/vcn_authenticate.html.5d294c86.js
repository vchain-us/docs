import{r as n,o as s,c as i,a as e,d as r,w as o,F as c,e as l,b as a}from"./app.e0d15f64.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";const h={},u=l(`<h2 id="vcn-authenticate" tabindex="-1"><a class="header-anchor" href="#vcn-authenticate" aria-hidden="true">#</a> vcn authenticate</h2><p>Authenticate assets against the blockchain</p><h3 id="synopsis" tabindex="-1"><a class="header-anchor" href="#synopsis" aria-hidden="true">#</a> Synopsis</h3><p>Authenticate assets against the blockchain.</p><p>Authentication is the process of matching the hash of a local asset to a hash on the blockchain. If matched, the returned result (the authentication) is the blockchain-stored metadata that\u2019s bound to the matching hash. Otherwise, the returned result status equals UNKNOWN.</p><p>Note that your assets will not be uploaded but processed locally.</p><p>The exit code will be 0 only if all assets&#39; statuses are equal to TRUSTED. Otherwise, the exit code will be 1.</p><p>Assets are referenced by the passed ARG(s), with authentication accepting 1 or more ARG(s) at a time. Multiple assets can be authenticated at the same time while passing them within ARG(s).</p><p>ARG must be one of</p><ul><li><code>file://&lt;file&gt;</code></li><li><code>dir://&lt;directory&gt;</code></li><li><code>git://&lt;repository&gt;</code></li><li><code>docker://&lt;image&gt;</code></li><li><code>podman://&lt;image&gt;</code></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>vcn authenticate [flags]
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>  vcn authenticate /bin/vcn
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>      --alerts             specify to authenticate and monitor for the configured alerts, if set no ARG(s) can be used
      --hash string        specify a hash to authenticate, if set no ARG(s) can be used
  -h, --help               help for authenticate
  -I, --org string         accept only authentications matching the passed organisation&#39;s ID,
                           if set no SignerID can be used
                           (overrides VCN_ORG env var, if any)
  -s, --signerID strings   accept only authentications matching the passed SignerID(s)
                           (overrides VCN_SIGNERID env var, if any)
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="options-inherited-from-parent-commands" tabindex="-1"><a class="header-anchor" href="#options-inherited-from-parent-commands" aria-hidden="true">#</a> Options inherited from parent commands</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>      --config string   config file (default is $HOME/.vcn/config.json)
  -o, --output string   output format, one of: --output=json|--output=yaml|--output=&#39;&#39;
  -S, --silent          silent mode, don&#39;t show progress spinner, but it will still output the result
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> SEE ALSO</h3>`,18),p=a("vcn"),m=a(" - vChain Codenotary - Notarize and authenticate, from code to production"),b=e("h6",{id:"auto-generated-by-spf13-cobra-on-24-jan-2020",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#auto-generated-by-spf13-cobra-on-24-jan-2020","aria-hidden":"true"},"#"),a(" Auto generated by spf13/cobra on 24-Jan-2020")],-1);function g(f,v){const t=n("RouterLink");return s(),i(c,null,[u,e("ul",null,[e("li",null,[r(t,{to:"/vcn/cmd/vcn.html"},{default:o(()=>[p]),_:1}),m])]),b],64)}var y=d(h,[["render",g]]);export{y as default};

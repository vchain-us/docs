(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{313:function(t,e,s){"use strict";s.r(e);var a=s(28),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"vcn-untrust"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vcn-untrust"}},[t._v("#")]),t._v(" vcn untrust")]),t._v(" "),s("p",[t._v("Untrust an asset")]),t._v(" "),s("h3",{attrs:{id:"synopsis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synopsis"}},[t._v("#")]),t._v(" Synopsis")]),t._v(" "),s("p",[t._v("Change an asset's status so it is equal to UNTRUSTED.")]),t._v(" "),s("p",[t._v("Untrust command calculates the SHA-256 hash of a digital asset\n(file, directory, container's image).\nThe hash (not the asset) and the desired status of UNTRUSTED are then\ncryptographically signed by the signer's secret (private key).\nNext, these signed objects are sent to the blockchain where the signer’s\ntrust level and a timestamp are added.\nWhen complete, a new blockchain entry is created that binds the asset’s\nsigned hash, signed status, level, and timestamp together.")]),t._v(" "),s("p",[t._v("Note that your assets will not be uploaded. They will be processed locally.")]),t._v(" "),s("p",[t._v("Assets are referenced by passed ARG(s) with untrust command only accepting\n1 ARG at a time.")]),t._v(" "),s("p",[t._v("ARG must be one of:\n"),s("file",[t._v("\nfile://"),s("file",[t._v("\ndir://"),s("directory",[t._v("\ngit://"),s("repository",[t._v("\ndocker://"),s("image",[t._v("\npodman://"),s("image")])])],1)],1)],1)],1),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("vcn untrust [flags]\n")])])]),s("h3",{attrs:{id:"options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" Options")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("  -a, --attr key=value   add user defined attributes (repeat --attr for multiple entries)\n      --hash string      specify the hash instead of using an asset, if set no ARG(s) can be used\n  -h, --help             help for untrust\n  -n, --name string      set the asset name\n      --no-ignore-file   if set, .vcnignore will be not written inside the targeted dir\n  -p, --public           when notarized as public, the asset name and metadata will be visible to everyone\n")])])]),s("h3",{attrs:{id:"options-inherited-from-parent-commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options-inherited-from-parent-commands"}},[t._v("#")]),t._v(" Options inherited from parent commands")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("      --config string   config file (default is $HOME/.vcn/config.json)\n  -o, --output string   output format, one of: --output=json|--output=yaml|--output=''\n  -S, --silent          silent mode, don't show progress spinner, but it will still output the result\n")])])]),s("h3",{attrs:{id:"see-also"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#see-also"}},[t._v("#")]),t._v(" SEE ALSO")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/vcn/cmd/vcn.html"}},[t._v("vcn")]),t._v("\t - vChain CodeNotary - Notarize and authenticate, from code to production")],1)]),t._v(" "),s("h6",{attrs:{id:"auto-generated-by-spf13-cobra-on-24-jan-2020"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#auto-generated-by-spf13-cobra-on-24-jan-2020"}},[t._v("#")]),t._v(" Auto generated by spf13/cobra on 24-Jan-2020")])])}),[],!1,null,null,null);e.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{464:function(e,t,a){"use strict";a.r(t);var s=a(56),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"vcn-notarize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vcn-notarize"}},[e._v("#")]),e._v(" vcn notarize")]),e._v(" "),a("p",[e._v("Notarize an asset onto the blockchain")]),e._v(" "),a("h3",{attrs:{id:"synopsis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synopsis"}},[e._v("#")]),e._v(" Synopsis")]),e._v(" "),a("p",[e._v("Notarize an asset onto the blockchain.")]),e._v(" "),a("p",[e._v("Notarization calculates the SHA-256 hash of a digital asset\n(file, directory, container's image).\nThe hash (not the asset) and the desired status of TRUSTED are then\ncryptographically signed by the signer's secret (private key).\nNext, these signed objects are sent to the blockchain where the signer’s\ntrust level and a timestamp are added.\nWhen complete, a new blockchain entry is created that binds the asset’s\nsigned hash, signed status, level, and timestamp together.")]),e._v(" "),a("p",[e._v("Note that your assets will not be uploaded. They will be processed locally.")]),e._v(" "),a("p",[e._v("Assets are referenced by passed ARG with notarization only accepting\n1 ARG at a time.")]),e._v(" "),a("p",[e._v("ARG must be one of:\n"),a("file"),e._v("\nfile://"),a("file"),e._v("\ndir://"),a("directory"),e._v("\ngit://"),a("repository"),e._v("\ndocker://"),a("image"),e._v("\npodman://"),a("image")],1),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("vcn notarize [flags]\n")])])]),a("h3",{attrs:{id:"options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[e._v("#")]),e._v(" Options")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("      --alert-email string   set the alert email recipient (ignored if --create-alert is not set)\n      --alert-name string    set the alert name (ignored if --create-alert is not set)\n  -a, --attr key=value       add user defined attributes (repeat --attr for multiple entries)\n      --create-alert         if set, an alert will be created (config will be stored into the .vcn dir)\n      --hash string          specify the hash instead of using an asset, if set no ARG(s) can be used\n  -h, --help                 help for notarize\n  -n, --name string          set the asset name\n      --no-ignore-file       if set, .vcnignore will be not written inside the targeted dir\n  -p, --public               when notarized as public, the asset name and metadata will be visible to everyone\n")])])]),a("h3",{attrs:{id:"options-inherited-from-parent-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options-inherited-from-parent-commands"}},[e._v("#")]),e._v(" Options inherited from parent commands")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("      --config string   config file (default is $HOME/.vcn/config.json)\n  -o, --output string   output format, one of: --output=json|--output=yaml|--output=''\n  -S, --silent          silent mode, don't show progress spinner, but it will still output the result\n")])])]),a("h3",{attrs:{id:"see-also"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#see-also"}},[e._v("#")]),e._v(" SEE ALSO")]),e._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/vcn/cmd/vcn.html"}},[e._v("vcn")]),e._v("\t - vChain CodeNotary - Notarize and authenticate, from code to production")],1)]),e._v(" "),a("h6",{attrs:{id:"auto-generated-by-spf13-cobra-on-24-jan-2020"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#auto-generated-by-spf13-cobra-on-24-jan-2020"}},[e._v("#")]),e._v(" Auto generated by spf13/cobra on 24-Jan-2020")])])}),[],!1,null,null,null);t.default=n.exports}}]);
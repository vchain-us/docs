(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{300:function(t,e,a){"use strict";a.r(e);var s=a(28),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"vcn-authenticate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vcn-authenticate"}},[t._v("#")]),t._v(" vcn authenticate")]),t._v(" "),a("p",[t._v("Authenticate assets against the blockchain")]),t._v(" "),a("h3",{attrs:{id:"synopsis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synopsis"}},[t._v("#")]),t._v(" Synopsis")]),t._v(" "),a("p",[t._v("Authenticate assets against the blockchain.")]),t._v(" "),a("p",[t._v("Authentication is the process of matching the hash of a local asset to\na hash on the blockchain.\nIf matched, the returned result (the authentication) is the blockchain-stored\nmetadata thatâ€™s bound to the matching hash.\nOtherwise, the returned result status equals UNKNOWN.")]),t._v(" "),a("p",[t._v("Note that your assets will not be uploaded but processed locally.")]),t._v(" "),a("p",[t._v("The exit code will be 0 only if all assets' statuses are equal to TRUSTED.\nOtherwise, the exit code will be 1.")]),t._v(" "),a("p",[t._v("Assets are referenced by the passed ARG(s), with authentication accepting\n1 or more ARG(s) at a time. Multiple assets can be authenticated at the\nsame time while passing them within ARG(s).")]),t._v(" "),a("p",[t._v("ARG must be one of:\n"),a("file",[t._v("\nfile://"),a("file",[t._v("\ndir://"),a("directory",[t._v("\ngit://"),a("repository",[t._v("\ndocker://"),a("image",[t._v("\npodman://"),a("image")])])],1)],1)],1)],1),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("vcn authenticate [flags]\n")])])]),a("h3",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  vcn authenticate /bin/vcn\n")])])]),a("h3",{attrs:{id:"options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" Options")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("      --alerts             specify to authenticate and monitor for the configured alerts, if set no ARG(s) can be used\n      --hash string        specify a hash to authenticate, if set no ARG(s) can be used\n  -h, --help               help for authenticate\n  -I, --org string         accept only authentications matching the passed organisation's ID,\n                           if set no SignerID can be used\n                           (overrides VCN_ORG env var, if any)\n  -s, --signerID strings   accept only authentications matching the passed SignerID(s)\n                           (overrides VCN_SIGNERID env var, if any)\n")])])]),a("h3",{attrs:{id:"options-inherited-from-parent-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options-inherited-from-parent-commands"}},[t._v("#")]),t._v(" Options inherited from parent commands")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("      --config string   config file (default is $HOME/.vcn/config.json)\n  -o, --output string   output format, one of: --output=json|--output=yaml|--output=''\n  -S, --silent          silent mode, don't show progress spinner, but it will still output the result\n")])])]),a("h3",{attrs:{id:"see-also"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#see-also"}},[t._v("#")]),t._v(" SEE ALSO")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/vcn/cmd/vcn.html"}},[t._v("vcn")]),t._v("\t - vChain CodeNotary - Notarize and authenticate, from code to production")],1)]),t._v(" "),a("h6",{attrs:{id:"auto-generated-by-spf13-cobra-on-24-jan-2020"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#auto-generated-by-spf13-cobra-on-24-jan-2020"}},[t._v("#")]),t._v(" Auto generated by spf13/cobra on 24-Jan-2020")])])}),[],!1,null,null,null);e.default=n.exports}}]);